<?xml version="1.0" encoding="gb2312"?>
<Config>
	<InterfaceHeaderExport IsExport="false" FileExt="cs"/>
	<StructExport IsExport="true" FileExt="cs"/>
	<EnumExport IsExport="true" FileExt="cs"/>
	<ConstExport IsExport="true" FileExt="cs"/>
	<DataStructHeaderExport IsExport="false" FileExt=""/>
	<InterfaceExport IsExport="true" FileExt="cs"/>
	<CallHeaderExport IsExport="false" FileExt=""/>
	<CallSourceExport IsExport="true" FileExt="cs"/>
	<HandlerHeaderExport IsExport="false" FileExt=""/>
	<HandlerSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectHeaderExport IsExport="false" FileExt=""/>
	<DataObjectSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectModifyFlagsExport IsExport="true" FileExt="cs"/>
	<DefaultStructGenerateOperations PackOperation="uint BufferSize=0;&rt;&nl;int BufferPtr=Packet.PrepareMember(ref BufferSize);&rt;&nl;CSmartStruct SubPacket=new CSmartStruct(Packet.GetData(),(uint)BufferPtr,BufferSize,true);&rt;&nl;&lt;IfNotDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket)) FailCount++;&lt;/IfNotDataObject&gt;&rt;&nl;&lt;IfDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket,MemberFlags)) FailCount++;&lt;/IfDataObject&gt;&rt;&nl;Packet.FinishMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,SubPacket.GetDataLen());" UnpackOperation="&lt;IfNotDataObject&gt;&lt;Variable&gt;.ParsePacket(Value);&lt;/IfNotDataObject&gt;&rt;&nl;&lt;IfDataObject&gt;&lt;Variable&gt;.ParsePacket(Value,MemberFlags);&lt;/IfDataObject&gt;&rt;&nl;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;" SizeCaculateOperation="&lt;IfNotDataObject&gt;CSmartStruct.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize()+CSmartStruct.GetEmptyStructSize())&lt;/IfNotDataObject&gt;&rt;&nl;&lt;IfDataObject&gt;CSmartStruct.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize(MemberFlags)+CSmartStruct.GetEmptyStructSize())&lt;/IfDataObject&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;();" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&rt;&nl;{&rt;&nl;&tab;&lt;IfNotDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;.Clone();&lt;/IfNotDataObject&gt;&rt;&nl;&tab;&lt;IfDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;,MemberFlags);&lt;/IfDataObject&gt;&rt;&nl;&tab;&lt;IfInDataObject&gt;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&lt;/IfInDataObject&gt;&rt;&nl;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&rt;&nl;{&rt;&nl;&tab;return &lt;Variable&gt;;&rt;&nl;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&rt;&nl;{&rt;&nl;&tab;&lt;Variable&gt;=(&lt;Type&gt;)Value.Clone();&rt;&nl;&tab;&lt;IfMonitorUpdate&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&rt;&nl;}" IndexOperation="" ConstIndexOperation=""/>
	<ArrayDefineConfig PackOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&rt;&nl;{&rt;&nl;&tab;CSmartStruct PacketSave=Packet;&rt;&nl;&tab;uint SubBufferSize=0;&rt;&nl;&tab;int SubBufferPtr=PacketSave.PrepareMember(ref SubBufferSize);&rt;&nl;&tab;Packet=new CSmartStruct(PacketSave.GetData(),(uint)SubBufferPtr,SubBufferSize,true);&rt;&nl;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&rt;&nl;&tab;{&rt;&nl;&tab;&tab;&lt;PackOperation&gt;&rt;&nl;&tab;}&tab;&rt;&nl;&tab;PacketSave.FinishMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,Packet.GetDataLen());&rt;&nl;&tab;Packet=PacketSave;&rt;&nl;}" UnpackOperation="case (ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;:&rt;&nl;&tab;&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&rt;&nl;&tab;{&rt;&nl;&tab;&tab;CSmartStruct PacketSave=Packet;&rt;&nl;&tab;&tab;CSmartValue ValueSave=Value;&rt;&nl;&tab;&tab;&lt;Variable&gt;.Clear();&tab;&tab;&rt;&nl;&tab;&tab;Packet=ValueSave;&rt;&nl;&tab;&tab;int SubPos=Packet.GetFirstMemberPosition();&rt;&nl;&tab;&tab;while(SubPos&gt;0)&rt;&nl;&tab;&tab;{&rt;&nl;&tab;&tab;&tab;ushort SubMemberID=0;&rt;&nl;&tab;&tab;&tab;Value=Packet.GetNextMember(ref SubPos,ref SubMemberID);&rt;&nl;&tab;&tab;&tab;switch(SubMemberID)&rt;&nl;&tab;&tab;&tab;{&rt;&nl;&tab;&tab;&tab;case (ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;:&rt;&nl;&tab;&tab;&tab;&tab;{&rt;&nl;&tab;&tab;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;&rt;&nl;&tab;&tab;&tab;&tab;&tab;&lt;UnpackOperation&gt;&rt;&nl;&tab;&tab;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&rt;&nl;&tab;&tab;&tab;&tab;}&rt;&nl;&tab;&tab;&tab;&tab;break;&rt;&nl;&tab;&tab;&tab;}&rt;&nl;&tab;&tab;}&rt;&nl;&tab;&tab;Packet=PacketSave;&rt;&nl;&tab;&tab;Value=ValueSave;&rt;&nl;&tab;}&rt;&nl;&tab;break;" SizeCaculateOperation="for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&rt;&nl;{&rt;&nl;&tab;Size+=&lt;ArrayElementSize&gt;;&rt;&nl;}&rt;&nl;Size+=CSmartStruct.GetStructMemberSize(0);" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="ArrayList&lt;Space&gt;&lt;Variable&gt;=new ArrayList();" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&rt;&nl;{&rt;&nl;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=(ArrayList)&lt;RightValue&gt;&lt;Variable&gt;.Clone();&rt;&nl;&tab;&lt;IfInDataObject&gt;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&lt;/IfInDataObject&gt;&rt;&nl;}" GetMethodDeclare="" GetMethodDefine="public ArrayList Get&lt;VariableName&gt;()&rt;&nl;{&rt;&nl;&tab;return &lt;Variable&gt;;&rt;&nl;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(ArrayList Value)&rt;&nl;{&rt;&nl;&tab;&lt;Variable&gt;=(ArrayList)Value.Clone();&rt;&nl;&tab;&lt;IfMonitorUpdate&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&rt;&nl;}" IndexOperation="((&lt;Type&gt;)&lt;Variable&gt;[&lt;Index&gt;])" ConstIndexOperation="((&lt;Type&gt;)&lt;Variable&gt;[&lt;Index&gt;])"/>
</Config>
